{"ast":null,"code":"var https = require(\"https\");\n\nvar os = require(\"os\");\n\nvar pjson = require(\"../package.json\");\n\nmodule.exports = WebHelper;\n\nfunction WebHelper(credentials, hostName) {\n  this.get = async function (path, headers) {\n    var headersToSend = Object.assign({\n      \"Api-Key\": credentials.apiKey,\n      \"Accept\": \"application/json\"\n    }, headers);\n    var options = {\n      hostname: hostName,\n      method: \"GET\",\n      path: path,\n      port: 443,\n      headers: headersToSend\n    };\n\n    if (credentials.apiKey && credentials.apiSecret) {\n      var response = await credentials.getAccessToken();\n\n      if (response.access_token) {\n        options.headers.Authorization = \"Bearer \" + response.access_token;\n      }\n    }\n\n    return request(options);\n  };\n\n  this.postForm = function (path, postData) {\n    var options = {\n      hostname: hostName,\n      method: \"POST\",\n      path: path,\n      port: 443,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Content-Length\": postData.length\n      }\n    };\n    return request(options, postData);\n  };\n\n  this.postQuery = async function (path, postData) {\n    postData = JSON.stringify(postData);\n    var options = {\n      hostname: hostName,\n      method: \"POST\",\n      path: path,\n      port: 443,\n      headers: {\n        \"Api-Key\": credentials.apiKey,\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": postData.length\n      }\n    };\n\n    if (credentials.apiKey && credentials.apiSecret) {\n      var response = await credentials.getAccessToken();\n\n      if (response.access_token) {\n        options.headers.Authorization = \"Bearer \" + response.access_token;\n      }\n    }\n\n    return request(options, postData);\n  };\n\n  this.putQuery = async function (path, postData) {\n    postData = JSON.stringify(postData);\n    var options = {\n      hostname: hostName,\n      method: \"PUT\",\n      path: path,\n      port: 443,\n      headers: {\n        \"Api-Key\": credentials.apiKey,\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": postData.length\n      }\n    };\n\n    if (credentials.apiKey && credentials.apiSecret) {\n      var response = await credentials.getAccessToken();\n\n      if (response.access_token) {\n        options.headers.Authorization = \"Bearer \" + response.access_token;\n      }\n    }\n\n    return request(options, postData);\n  };\n\n  this.deleteQuery = async function (path) {\n    var options = {\n      hostname: hostName,\n      method: \"DELETE\",\n      path: path,\n      port: 443,\n      headers: {\n        \"Api-Key\": credentials.apiKey,\n        \"Content-Length\": 0\n      }\n    };\n\n    if (credentials.apiKey && credentials.apiSecret) {\n      var response = await credentials.getAccessToken();\n\n      if (response.access_token) {\n        options.headers.Authorization = \"Bearer \" + response.access_token;\n      }\n    }\n\n    return request(options);\n  };\n\n  function request(options) {\n    let postData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    addUserAgentString(options);\n    return new Promise((resolve, reject) => {\n      var request = https.request(options, function (response) {\n        response.setEncoding(\"utf8\");\n        var str = \"\";\n        response.on(\"data\", function (chunk) {\n          str += chunk;\n        });\n        response.on(\"end\", function () {\n          if (response.statusCode >= 400) {\n            var err = new Error(response.statusMessage);\n            err.statusCode = response.statusCode;\n            reject(err);\n          } else {\n            resolve(str.length > 0 ? JSON.parse(str) : null);\n          }\n        });\n        response.on(\"error\", function (err) {\n          reject(err);\n        });\n      });\n\n      if (postData) {\n        request.write(postData);\n      }\n\n      request.end();\n    });\n  }\n\n  function addUserAgentString(options) {\n    // eslint-disable-next-line no-undef\n    options.headers[\"User-Agent\"] = \"GettyImagesApiSdk/\" + pjson.version + \" (\" + os.type() + \" \" + os.release() + \"; Node.js \" + process.version + \")\";\n  }\n}","map":{"version":3,"names":["https","require","os","pjson","module","exports","WebHelper","credentials","hostName","get","path","headers","headersToSend","Object","assign","apiKey","options","hostname","method","port","apiSecret","response","getAccessToken","access_token","Authorization","request","postForm","postData","length","postQuery","JSON","stringify","putQuery","deleteQuery","addUserAgentString","Promise","resolve","reject","setEncoding","str","on","chunk","statusCode","err","Error","statusMessage","parse","write","end","version","type","release","process"],"sources":["D:/Getty-Search-Media-Results/node_modules/@vineetshekhawat/gettyimages-api/lib/webhelper.js"],"sourcesContent":["var https = require(\"https\");\r\nvar os = require(\"os\");\r\nvar pjson = require(\"../package.json\");\r\n\r\nmodule.exports = WebHelper;\r\n\r\nfunction WebHelper(credentials, hostName) {\r\n\r\n    this.get = async function (path,headers) {\r\n        var headersToSend = Object.assign({\r\n            \"Api-Key\": credentials.apiKey,\r\n            \"Accept\": \"application/json\"},headers);\r\n\r\n        var options = {\r\n            hostname: hostName,\r\n            method: \"GET\",\r\n            path: path,\r\n            port: 443,\r\n            headers: headersToSend\r\n        };\r\n\r\n        if (credentials.apiKey && credentials.apiSecret) {\r\n            var response = await credentials.getAccessToken();\r\n            if (response.access_token) {\r\n                options.headers.Authorization = \"Bearer \" + response.access_token;\r\n            }\r\n        }\r\n\r\n        return request(options);\r\n    };\r\n\r\n    this.postForm =  function (path, postData) {\r\n\r\n        var options = {\r\n            hostname: hostName,\r\n            method: \"POST\",\r\n            path: path,\r\n            port: 443,\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                \"Content-Length\": postData.length\r\n            }\r\n        };\r\n\r\n        return request(options, postData);\r\n\r\n    };\r\n\r\n    this.postQuery = async function (path, postData) {\r\n\r\n        postData = JSON.stringify(postData);\r\n\r\n        var options = {\r\n            hostname: hostName,\r\n            method: \"POST\",\r\n            path: path,\r\n            port: 443,\r\n            headers: {\r\n                \"Api-Key\": credentials.apiKey,\r\n                \"Content-Type\": \"application/json\",\r\n                \"Content-Length\": postData.length\r\n            }\r\n        };\r\n\r\n        if (credentials.apiKey && credentials.apiSecret) {\r\n            var response = await credentials.getAccessToken();\r\n            if (response.access_token) {\r\n                options.headers.Authorization = \"Bearer \" + response.access_token;\r\n            }\r\n        }\r\n        \r\n        return request(options, postData);\r\n    };\r\n\r\n    this.putQuery = async function (path, postData) {\r\n        \r\n        postData = JSON.stringify(postData);\r\n\r\n        var options = {\r\n            hostname: hostName,\r\n            method: \"PUT\",\r\n            path: path,\r\n            port: 443,\r\n            headers: {\r\n                \"Api-Key\": credentials.apiKey,\r\n                \"Content-Type\": \"application/json\",\r\n                \"Content-Length\": postData.length\r\n            }\r\n        };\r\n\r\n        if (credentials.apiKey && credentials.apiSecret) {\r\n            var response = await credentials.getAccessToken();\r\n            if (response.access_token) {\r\n                options.headers.Authorization = \"Bearer \" + response.access_token;\r\n            }\r\n        }\r\n        \r\n        return request(options, postData);\r\n    };\r\n\r\n    this.deleteQuery = async function (path) {\r\n\r\n        var options = {\r\n            hostname: hostName,\r\n            method: \"DELETE\",\r\n            path: path,\r\n            port: 443,\r\n            headers: {\r\n                \"Api-Key\": credentials.apiKey,\r\n                \"Content-Length\": 0\r\n            }\r\n        };\r\n\r\n        if (credentials.apiKey && credentials.apiSecret) {\r\n            var response = await credentials.getAccessToken();\r\n            if (response.access_token) {\r\n                options.headers.Authorization = \"Bearer \" + response.access_token;\r\n            }\r\n        }\r\n        \r\n        return request(options);\r\n    };\r\n\r\n    function request(options, postData = null) {\r\n\r\n        addUserAgentString(options);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            var request = https.request(options, function (response) {\r\n\r\n                response.setEncoding(\"utf8\");\r\n                var str = \"\";\r\n\r\n                response.on(\"data\", function (chunk) {\r\n                    str += chunk;\r\n                });\r\n                response.on(\"end\", function () {\r\n                    if (response.statusCode >= 400) {\r\n                        var err = new Error(response.statusMessage);\r\n                        err.statusCode = response.statusCode;\r\n                        reject(err);\r\n\r\n                    } else {\r\n                        resolve((str.length > 0) ? JSON.parse(str) : null);\r\n                    }\r\n                });\r\n                response.on(\"error\", function (err) {\r\n                    reject(err);\r\n                });\r\n            });\r\n            if (postData) {\r\n                request.write(postData);\r\n            }\r\n            request.end();\r\n        });\r\n    }\r\n\r\n    function addUserAgentString(options) {\r\n        // eslint-disable-next-line no-undef\r\n        options.headers[\"User-Agent\"] = \"GettyImagesApiSdk/\" + pjson.version + \" (\" + os.type() + \" \" + os.release() + \"; Node.js \" + process.version + \")\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}